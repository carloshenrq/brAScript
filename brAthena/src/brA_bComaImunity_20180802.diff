 conf/messages.conf                  |  4 ++++
 sql/pre-renovacao/pre-renovacao.sql |  2 ++
 sql/renovacao/renovacao.sql         |  2 ++
 src/map/map.h                       |  3 +++
 src/map/pc.c                        |  7 ++++++
 src/map/pc.h                        |  1 +
 src/map/status.c                    | 43 +++++++++++++++++++++++++++++++++++++
 src/map/status.h                    |  6 ++++++
 8 files changed, 68 insertions(+)

diff --git a/conf/messages.conf b/conf/messages.conf
index 5dc1d91..0369c82 100644
--- a/conf/messages.conf
+++ b/conf/messages.conf
@@ -1562,5 +1562,9 @@
 3009: SolicitaÁ„o de unban por mac enviada ao char-server.
 3010: Seu mac-address j· consta no mapa solicitado.
 
+// Imunidade ao coma.
+3100: VocÍ est· imune ao coma por %d segundos.
+3101: VocÍ n„o est· mais imune ao coma.
+
 // TraduÁıes personalizadas
 import: conf/import/msg_conf.txt
diff --git a/sql/pre-renovacao/pre-renovacao.sql b/sql/pre-renovacao/pre-renovacao.sql
index ccf0bd0..1e8cfbe 100644
--- a/sql/pre-renovacao/pre-renovacao.sql
+++ b/sql/pre-renovacao/pre-renovacao.sql
@@ -860,6 +860,7 @@ REPLACE INTO const_db VALUES('bSetDefRace','2059',0);
 REPLACE INTO const_db VALUES('bSetMDefRace','2060',0);
 REPLACE INTO const_db VALUES('bAddRaceTolerance','2061',0);
 REPLACE INTO const_db VALUES('bAddMaxWeight','2062',0);
+REPLACE INTO const_db VALUES('bComaImunity', '2064', 0);
 REPLACE INTO const_db VALUES('EQI_HEAD_TOP','1',0);
 REPLACE INTO const_db VALUES('EQI_ARMOR','2',0);
 REPLACE INTO const_db VALUES('EQI_HAND_L','3',0);
@@ -1595,6 +1596,7 @@ REPLACE INTO const_db VALUES('SC_ANTI_M_BLAST','657',0);
 REPLACE INTO const_db VALUES('SC_B_TRAP','658',0);
 REPLACE INTO const_db VALUES('SC_H_MINE','659',0);
 REPLACE INTO const_db VALUES('SC_QD_SHOT_READY','660',0);
+REPLACE INTO const_db VALUES('SC_NOCOMA', '893', 0);
 REPLACE INTO const_db VALUES('e_gasp','0',0);
 REPLACE INTO const_db VALUES('e_what','1',0);
 REPLACE INTO const_db VALUES('e_ho','2',0);
diff --git a/sql/renovacao/renovacao.sql b/sql/renovacao/renovacao.sql
index d562a7a..9e784b6 100644
--- a/sql/renovacao/renovacao.sql
+++ b/sql/renovacao/renovacao.sql
@@ -860,6 +860,7 @@ REPLACE INTO const_db VALUES('bSetDefRace','2059',0);
 REPLACE INTO const_db VALUES('bSetMDefRace','2060',0);
 REPLACE INTO const_db VALUES('bAddRaceTolerance','2061',0);
 REPLACE INTO const_db VALUES('bAddMaxWeight','2062',0);
+REPLACE INTO const_db VALUES('bComaImunity', '2064', 0);
 REPLACE INTO const_db VALUES('EQI_HEAD_TOP','1',0);
 REPLACE INTO const_db VALUES('EQI_ARMOR','2',0);
 REPLACE INTO const_db VALUES('EQI_HAND_L','3',0);
@@ -1595,6 +1596,7 @@ REPLACE INTO const_db VALUES('SC_ANTI_M_BLAST','657',0);
 REPLACE INTO const_db VALUES('SC_B_TRAP','658',0);
 REPLACE INTO const_db VALUES('SC_H_MINE','659',0);
 REPLACE INTO const_db VALUES('SC_QD_SHOT_READY','660',0);
+REPLACE INTO const_db VALUES('SC_NOCOMA', '893', 0);
 REPLACE INTO const_db VALUES('e_gasp','0',0);
 REPLACE INTO const_db VALUES('e_what','1',0);
 REPLACE INTO const_db VALUES('e_ho','2',0);
diff --git a/src/map/map.h b/src/map/map.h
index 4d58fcd..6117989 100644
--- a/src/map/map.h
+++ b/src/map/map.h
@@ -469,6 +469,9 @@ enum status_point_types {
 
 	/* must be the last, plugins add bonuses from this value onwards */
 	SP_LAST_KNOWN,
+
+	// [CarlosHenrq] Imunidade ao coma
+	SP_COMA_IMUNITY,
 };
 
 enum look {
diff --git a/src/map/pc.c b/src/map/pc.c
index 3550c6d..2002e8b 100644
--- a/src/map/pc.c
+++ b/src/map/pc.c
@@ -3025,6 +3025,11 @@ int pc_bonus(struct map_session_data *sd,int type,int val) {
 			if (sd->state.lr_flag != 2)
 				sd->max_weight += val;
 		break;
+		// [CarlosHenrq] Imunidade ao coma.
+		case SP_COMA_IMUNITY:
+			if(sd->state.lr_flag != 2)
+				sd->special_state.coma_imunity = 1;
+			break;
 		default:
 			ShowWarning("pc_bonus: tipo desconhecido %d %d !\n",type,val);
 			break;
@@ -8223,6 +8228,8 @@ int pc_readparam(struct map_session_data* sd,int type)
 		case SP_VARCASTRATE:     val = sd->bonus.varcastrate; break;
 		case SP_ADD_VARIABLECAST:val = sd->bonus.add_varcast; break;
 #endif
+		// [CarlosHenrq] Imunidade ao coma
+		case SP_COMA_IMUNITY:	val	= sd->special_state.coma_imunity ? 1 : 0; break;
 	}
 
 	return val;
diff --git a/src/map/pc.h b/src/map/pc.h
index e7f5139..6e9ae6d 100644
--- a/src/map/pc.h
+++ b/src/map/pc.h
@@ -233,6 +233,7 @@ struct map_session_data {
 		unsigned int perfect_hiding : 1; // [Valaris]
 		unsigned int no_knockback : 1;
 		unsigned int bonus_coma : 1;
+		unsigned int coma_imunity : 1;
 	} special_state;
 	int login_id1, login_id2;
 	unsigned short class_; //This is the internal job ID used by the map server to simplify comparisons/queries/etc. [Skotlex]
diff --git a/src/map/status.c b/src/map/status.c
index 6580f62..1c46a12 100644
--- a/src/map/status.c
+++ b/src/map/status.c
@@ -6699,6 +6699,30 @@ int status_isimmune(struct block_list *bl)
 	return 0;
 }
 
+/**
+ * Verifica se o personagem possui imunidade ao coma.
+ *
+ * @author CarlosHenrq
+ * @param bl
+ *
+ * @return Verdadeiro caso seja imune ao coma.
+ */
+bool status_isimmune_coma(struct block_list* bl)
+{
+	struct map_session_data* sd;
+	// Se nao for um jogador, nao possui imunidade ao coma.
+	if(bl == NULL || bl->type != BL_PC || (sd = BL_UCAST(BL_PC, bl)) == NULL)
+		return false;
+
+	// Jogador √© imune ao coma.
+	if(sd->sc.data[SC_NOCOMA])
+		return true;
+
+	// Verifica se o jogador possui status de imunidade
+	// ao coma.
+	return (sd->special_state.coma_imunity == 1);
+}
+
 struct view_data *status_get_viewdata(struct block_list *bl)
 {
 	nullpo_retr(NULL, bl);
@@ -6942,6 +6966,10 @@ int status_get_sc_def(struct block_list *src, struct block_list *bl, enum sc_typ
 			return 0;
 		}
 
+	// [CarlosHenrq] Imunidade ao coma.
+	if(type == SC_COMA && status->isimmune_coma(bl))
+		return 0;
+
 	sd = BL_CAST(BL_PC,bl);
 	st = status->get_status_data(bl);
 	bst = status->get_base_status(bl);
@@ -7445,6 +7473,14 @@ int status_change_start(struct block_list *src, struct block_list *bl, enum sc_t
 	undead_flag = battle->check_undead(st->race,st->def_ele);
 	//Check for inmunities / sc fails
 	switch (type) {
+		case SC_NOCOMA:
+			if(sd && sd->fd)
+			{
+				char msg[128] = "";
+				sprintf(msg, msg_sd(sd, 3100), tick/1000);
+				clif->messagecolor_self(sd->fd, COLOR_DEFAULT, msg);
+			}
+			break;
 		case SC_DRUMBATTLE:
 		case SC_NIBELUNGEN:
 		case SC_INTOABYSS:
@@ -10593,6 +10629,10 @@ int status_change_end_(struct block_list* bl, enum sc_type type, int tid, const
 	vd = status->get_viewdata(bl);
 	calc_flag = status->dbs->ChangeFlagTable[type];
 	switch(type) {
+		case SC_NOCOMA:
+			if(sd && sd->fd)
+				clif->messagecolor_self(sd->fd, COLOR_RED, msg_sd(sd, 3101));
+			break;
 		case SC_GRANITIC_ARMOR:
 		{
 			int damage = st->max_hp*sce->val3/100;
@@ -13524,4 +13564,7 @@ void status_defaults(void) {
 	status->read_job_db_sub = status_read_job_db_sub;
 	status->buff_script = buff_script;
 	status->buffspecial_db = buffspecial_db;
+
+	// [CarlosHenrq] Imunidade ao coma.
+	status->isimmune_coma = status_isimmune_coma;
 }
diff --git a/src/map/status.h b/src/map/status.h
index fd72496..fe6e366 100644
--- a/src/map/status.h
+++ b/src/map/status.h
@@ -871,6 +871,9 @@ typedef enum sc_type {
 	SC_EL_OFFENSIVE,
 	SC_EL_WAIT,
 	
+	// [CarlosHenrq] Prote√ß√£o ao coma
+	SC_NOCOMA = 893,
+
 	SC_MAX, //Automatically updated max, used in for's to check we are within bounds.
 } sc_type;
 
@@ -2349,6 +2352,9 @@ struct status_interface {
 	bool (*readdb_scconfig) (char *fields[], int columns, int current);
 	void (*read_job_db) (void);
 	void (*read_job_db_sub) (int idx, const char *name, config_setting_t *jdb);
+
+	// [CarlosHenrq] Imunidade ao coma.
+	bool (*isimmune_coma)(struct block_list*);
 };
 
 struct status_interface *status;
